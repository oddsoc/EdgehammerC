//  SPDX-License-Identifier: MIT
/*
 *  Copyright (c) 2025 Andrew Scott-Jones <andrew@edgehammer.io>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in 
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 *  DEALINGS IN THE SOFTWARE.
 */

use std::cell::RefCell;
use std::io::Write;
use std::rc::Rc;

use crate::codegen::Code;

fn emit_operand(file: &mut std::fs::File, instr: Rc<RefCell<Code>>) {
    match &*instr.borrow() {
        Code::Imm(val) => {
            write!(file, "${}", val).unwrap();
        }

        Code::Reg(_val) => {
            write!(file, "%eax").unwrap();
        }

        Code::Stack(idx) => {
            write!(file, "-{}(%rbp)", idx).unwrap();
        }

        Code::Tmp => {
            write!(file, "%r10d").unwrap();
        }

        _ => {
            unreachable!();
        }
    }
}

fn emit_instruction(file: &mut std::fs::File, instr: Rc<RefCell<Code>>) {
    match &*instr.borrow() {
        Code::Mov { src, dst } => {
            write!(file, "\tmovl ").unwrap();
            emit_operand(file, src.clone());
            write!(file, ", ").unwrap();
            emit_operand(file, dst.clone());
            writeln!(file, "").unwrap();
        }

        Code::Neg { dst } => {
            write!(file, "\tnegl ").unwrap();
            emit_operand(file, dst.clone());
            writeln!(file, "").unwrap();
        }

        Code::Not { dst } => {
            write!(file, "\tnotl ").unwrap();
            emit_operand(file, dst.clone());
            writeln!(file, "").unwrap();
        }

        Code::Ret => {
            writeln!(file, "\tmovq %rbp, %rsp").unwrap();
            writeln!(file, "\tpopq %rbp").unwrap();
            writeln!(file, "\tret").unwrap();
        }

        _ => {
            unreachable!();
        }
    }
}

pub fn emit(filename: &str, code: Vec<Rc<RefCell<Code>>>) {
    let mut file = std::fs::File::create(filename).unwrap();

    writeln!(file, "// Generated by Andrew's \"C\" Compiler\n").unwrap();

    for instr in code {
        match &*instr.borrow() {
            Code::Function { name, stack, code } => {
                writeln!(file, "\t.globl {}", name).unwrap();
                writeln!(file, "{}:", name).unwrap();

                writeln!(file, "\tpushq %rbp").unwrap();
                writeln!(file, "\tmovq %rsp, %rbp").unwrap();
                writeln!(file, "\tsubq ${}, %rsp", stack).unwrap();

                for instr in code {
                    emit_instruction(&mut file, instr.clone());
                }
            }

            _ => {
                emit_instruction(&mut file, instr.clone());
            }
        }
    }

    writeln!(file, "\n\t.ident\t\"EdgehammerC 0.1.0\"").unwrap();
    writeln!(file, "\t.section .note.GNU-stack,\"\",@progbits").unwrap();
}
